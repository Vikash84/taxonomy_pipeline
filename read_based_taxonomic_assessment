#!/bin/bash

# Mark Stenglein
# 4/24/2015 

file_base=$1

log=${file_base}.pipeline.log

{

# this is a somewhat kludgey way to build the pipeline on the fly
if [ "dont_do_this_part_already_done" = "XXX" ]
then

   echo "bla bla bla" > /dev/null

# just keep moving this else down to keep adding to what will get done
else

   echo "performing read-based taxonomic assessment for $file_base"
   date

   # run gsnap to get nt-based alignments to db seqs


	# first, remove reads that map to contigs

	bowtie2-build ${file_base}_spade_contigs.fa ${file_base}_spade_contigs

   btindex=${file_base}_spade_contigs

   num_cpu=12
   output_suffix=$btindex
   
	# identify R1 reads that map to spade contigs
   bowtie2 -x $btindex --local -q -U ${file_base}_R1_fuh.fastq --sensitive --score-min C,100,0 --no-unal --un ${file_base}_R1_fuh_s1.fastq -p $num_cpu -S ${file_base}_R1_fuh.fastq.${output_suffix}_bt.sam 2> ${file_base}_R1_fuh.fastq.${output_suffix}_bt.log
	# filter R2 reads whose R1 pair mapped to contigs
   reconcile_read2_file ${file_base}_R1_fuh_s1.fastq ${file_base}_R2_fuh.fastq > ${file_base}_R2_fuh_s1.fastq

	tally_sam_subjects ${file_base}_R1_fuh.fastq.${output_suffix}_bt.sam > ${file_base}_R1_fuh.fastq.${output_suffix}_bt.sam.subject_hits

	# look for remaining R2 reads that map to spade contigs
   bowtie2 -x $btindex --local -q -U ${file_base}_R2_fuh_s1.fastq  --sensitive --score-min C,100,0 --no-unal --un ${file_base}_R2_fuhs.fastq -p $num_cpu -S ${file_base}_R2_fuh_s1.fastq.${output_suffix}_bt.sam 2> ${file_base}_R2_fuh_s1.fastq.${output_suffix}_bt.log
	# filter R1 reads whose R2 pair mapped to contigs
   reconcile_read2_file ${file_base}_R2_fuhs.fastq ${file_base}_R1_fuh_s1.fastq > ${file_base}_R1_fuhs.fastq

   f1=${file_base}_R1_fuhs.fastq
   f2=${file_base}_R2_fuhs.fastq

   echo "gsnap $file_base ($f1) vs. nt database" 
   date

   nt_index=/home/databases/nr_nt/nt/
   gsnapl --use-shared-memory=1 -B 4 -t 12 --npaths=10  --gmap-mode=none --nofails --ordered -D $nt_index -d nt $f1 > ${f1}.gsnap

   # get the gsnap vs nt "misses"
   f1_out=${f1}.gsnap
   fasta_from_gsnap -r $f1_out > ${file_base}_R1_fuhsn1.fastq

   # filter out R2 reads where R1 had a good gsnap hit vs. nt
   reconcile_read2_file ${file_base}_R1_fuhsn1.fastq ${file_base}_R2_fuhs.fastq > ${file_base}_R2_fuhsn1.fastq 

   f2=${file_base}_R2_fuhsn1.fastq 

   gsnapl --use-shared-memory=1 -B 4 -t 12 --npaths=10  --gmap-mode=none --nofails --ordered -D $nt_index -d nt $f2 > ${f2}.gsnap
   fasta_from_gsnap -r ${f2}.gsnap > ${file_base}_R2_fuhsn.fastq

   echo "filter out remaining R1 reads where R2 had a good gsnap hit vs. nt" 
   reconcile_read2_file ${file_base}_R2_fuhsn.fastq ${file_base}_R1_fuhsn1.fastq > ${file_base}_R1_fuhsn.fastq 

   # todo: assembly and map reads to contigs -> define taxonomy of assemblies
   # todo: deal w/ R1/R2 concordance/discordance/tax-assignment more elegantly

   echo "tallying gsnap vs. nt hits" 
   date 
   tally_hits_gsnap.pl ${file_base}_R1_fuhs.fastq.gsnap ${file_base}_R2_fuhsn1.fastq.gsnap
   tally_hits_gsnap.pl -d -o desc_tally ${file_base}_R1_fuhs.fastq.gsnap ${file_base}_R2_fuhsn1.fastq.gsnap
   tally_hits_gsnap.pl -t -ti -o tab_tree_tally ${file_base}_R1_fuhs.fastq.gsnap ${file_base}_R2_fuhsn1.fastq.gsnap

   # pull out hits to taxa of interest
   # fastq_to_fasta  ${file_base}_R1_fuhs.fastq >  ${file_base}_R1_fuhs.fa
   # fastq_to_fasta  ${file_base}_R2_fuhs.fastq >  ${file_base}_R2_fuhs.fa

   # cat ${file_base}_R1_fuhs.fastq.gsnap ${file_base}_R2_fuhsn1.fastq.gsnap > ${file_base}_R12_fuhs.fastq.gsnap

   # if you have a file w/ particular taxids of interest
   # distribute_fasta_by_gsnap_taxid.pl -f taxids_of_interest.txt  ${file_base}_R1_furg.fa ${file_base}_R12_furg.fastq.gsnap 
   # distribute_fasta_by_gsnap_taxid.pl -f taxids_of_interest.txt  ${file_base}_R2_furg.fa ${file_base}_R12_furg.fastq.gsnap 

   # pull out virus-derived reads
   # distribute_fasta_by_gsnap_taxid.pl -v ${file_base}_R1_fuhs.fa ${file_base}_R12_fuhs.fastq.gsnap 
   # distribute_fasta_by_gsnap_taxid.pl -v ${file_base}_R2_fuhs.fa ${file_base}_R12_fuhs.fastq.gsnap 

   # exit here cause will run rest in parallel
   ### exit

   # RAPSEARCH

   f1=${file_base}_R1_fuhsn.fastq
   f2=${file_base}_R2_fuhsn.fastq

   echo "rapsearch remaining hits for $file_base ($f1) vs. nr" 
   date 

   rap_index=/home/databases/nr_nt/nr_rap_index

   echo "rapsearch ${file_base}_R1_fuhsn.fastq"
   # -l 20 -> length 20 (mininmum amino acid alignment) 
   rapsearch -q $f1 -d $rap_index -u 1  -z 24 -l 20 -t n -t q -v 10 -b 10 -s f -e 1e-2  > ${f1}.rap_nr

   fasta_from_blast -r -f ${f1} ${f1}.rap_nr > ${file_base}_R1_fuhsnn1.fastq 

   echo "filter out R2 reads where R1 had a good rapsearch hit vs. nr" 
   reconcile_read2_file ${file_base}_R1_fuhsnn1.fastq ${file_base}_R2_fuhsn.fastq > ${file_base}_R2_fuhsnn1.fastq 

   f2=${file_base}_R2_fuhsnn1.fastq 

   echo "rapsearch remaining hits for $file_base ($f2) vs. nr" 
   date 

   rapsearch -q $f2 -d $rap_index -u 1 -z 24 -l 20 -t n -t q -v 10 -b 10 -s f -e 1e-2  > ${f2}.rap_nr

   fasta_from_blast -r -f ${file_base}_R2_fuhsnn1.fastq ${file_base}_R2_fuhsnn1.fastq.rap_nr > ${file_base}_R2_fuhsnn.fastq 

   echo "filter out remaining R1 reads where R2 had a good rapsearch hit vs. nr" 
   reconcile_read2_file ${file_base}_R2_fuhsnn.fastq ${file_base}_R1_fuhsnn1.fastq > ${file_base}_R1_fuhsnn.fastq

   echo "done with rapsearch " 
   date 

   # todo: deal w/ R1/R2 concordance/discordance/tax-assignment more elegantly
   echo "tallying rapsearch vs. nr hits" 
   tally_hits.pl ${file_base}_R1_fuhsn.fastq.rap_nr ${file_base}_R2_fuhsnn1.fastq.rap_nr 
   tally_hits.pl -d -o desc_tally ${file_base}_R1_fuhsn.fastq.rap_nr ${file_base}_R2_fuhsnn1.fastq.rap_nr 
   tally_hits.pl -t -ti -o tab_tree_tally ${file_base}_R1_fuhsn.fastq.rap_nr ${file_base}_R2_fuhsnn1.fastq.rap_nr 

   echo "done tallying" 
   date 

   echo "pulling out virus-derived reads (RAPSearch)" 
   cat ${file_base}_R1_fuhsn.fastq.rap_nr ${file_base}_R2_fuhsnn1.fastq.rap_nr > ${file_base}_R12_fuhsn.fastq.rap_nr 

   fastq_to_fasta ${file_base}_R1_fuhsn.fastq > ${file_base}_R1_fuhsn.fa
   fastq_to_fasta ${file_base}_R2_fuhsn.fastq > ${file_base}_R2_fuhsn.fa

   # pull out virus-derived reads
   distribute_fasta_by_blast_taxid.pl -v ${file_base}_R1_fuhsn.fa ${file_base}_R12_fuhsn.fastq.rap_nr 
   distribute_fasta_by_blast_taxid.pl -v ${file_base}_R2_fuhsn.fa ${file_base}_R12_fuhsn.fastq.rap_nr 

   echo "done with read-based taxonomic assessment"
   date

fi

} | tee -a $log
