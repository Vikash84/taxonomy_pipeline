#!/usr/bin/env bash

#
# This script uses the SPADES assembler to create contigs from a fastq file and then
# uses blastn and then diamond to try to taxonomically assign the contigs.
#
# It also maps individual reads back to to contigs to identify non-aligning reads and to 
# assess how many reads were collapsed into contigs
#
# After assembly, it uses blastn to align the contigs to the nt database and pulls out reads that
# produce good nt-level alignments
#
# It then uses diamond to align the remaining contigs to the nr database. 
#
# After each of these alignment steps, taxonomic reports (.tally, .tree_tally, etc.) are 
# created and contigs aligning to viral taxa are output to files
#
# The script takes one argument as input a file "base name"
#
# It expects that a file named <base_name>_R1_fuh.fastq to exist
#
# There are also a number of other scripts and programs (spades.py, bowtie2, ...) that this script expects
# to be in the user's PATH:
#
#  Programs:
#
#  spades.py
#  bowtie2
#  bowtie2-build
#  blastn
#  diamond
#
#  Scripts I've written:
#
#  fasta_to_fasta
#  filter_fasta_by_size
#  tally_sam_subjects
#  fasta_from_sam
#  fasta_from_blast
#  tally_blast_hits 
#  distribute_fasta_by_blast_taxid 
#
# Mark Stenglein
#
# 11/6/2015
#

id=$1

log=${id}.pipeline.log

f1=${id}_R1_fuh.fastq

# these brackets are for tee'ing stdout to the logfile
{

   echo "begin contig-based taxonomic assessment for $id"
   date

   # **********************************
   # first, create contigs using spades
   # **********************************

   echo "run spades for $id"
   date

   spades.py -o ${id}.spades -s $f1 -t 24 -m 150

   echo "done running spades for $id"
   date

   # cp contigs file (fasta_to_fasta converts to 1-line fasta format)
   ./fasta_to_fasta ${id}.spades/contigs.fasta > ./${id}_spade_contigs.fa


   # ***********************************************
   # assess which reads align to contigs
   # so that we can:
   # (1) do a weighted taxonomic assessment, and 
   # (2) taxomically assess non-aligning reads later
   # ***********************************************
   spades_output=${id}_spade_contigs.fa
   big_contigs_file=${id}_spade_contigs_gt_150.fa
   ./filter_fasta_by_size -b 150 $spades_output | ./fasta_to_fasta >  $big_contigs_file

   bt_index=${id}_spade_contigs_gt_150
   bowtie2-build $big_contigs_file $bt_index
   # bowtie2-build $spades_output $bt_index

   # C,120,1 makes min score 120 -> ~corresponds to 100% identity over ~60 bases
   bowtie2 -x $bt_index --local --score-min C,120,1 -q -U $f1 --un ${id}_R1_fuhs.fastq -p 12 -S ${f1}.${bt_index}.sam 2> ${f1}.${bt_index}.bt_log

	# convert singletons to fasta
	./fastq_to_fasta ${id}_R1_fuhs.fastq > ${id}_R1_fuhs.fa

   # count the # of reads that hit each contig 
   ./tally_sam_subjects ${f1}.${bt_index}.sam > ${id}_contig_weights.txt

   weights_file=${id}_contig_weights.txt

   # *************************************
   # blastn contigs and singletons vs. nt
   # *************************************

	# make a merged file containing singletons and contigs
	cat ${id}_spade_contigs.fa ${id}_fuhs.fa > ${id}_contigs_singletons.fa

   f1=${id}_contigs_singletons.fa

   echo "blastn contigs for $id ($f1) vs nt"
   date

   db="/home/databases/nr_nt/nt"

   blastn -query $f1 -db $db -num_threads 12 -evalue 1e-8 -task megablast -outfmt 6 | ./consolidate_blast_output > ${f1}.bn_nt

   echo "done with blastn for $id"
   date

   # get the blastn vs nt "misses"
   f1_out=${f1}.bn_nt
   ./fasta_from_blast -r $f1_out > ${id}_contigs_singletons_n.fa

   # *******************************************
   # Taxonomic assessment of nt-based alignments
   # *******************************************

   echo "tallying blastn vs. nt hits" 
   date 
   ./tally_blast_hits -w $weights_file ${f1}.bn_nt > ${f1}.bn_nt.tally
   ./tally_blast_hits -w $weights_file -t -ti -o tab_tree_tally ${f1}.bn_nt > ${f1}.bn_nt.tab_tree_tally

   # ***************************************************************************
   # pull out virus-derived reads - this will create a file for each viral taxon
   # ***************************************************************************
   ./distribute_fasta_by_blast_taxid -v ${f1} ${f1}.bn_nt

   # ************************************************
   # run diamond to identify protein-level alignments
   # ************************************************

   echo "diamond remaining contigs for $id vs. nr" 
   date

   f1=${id}_contigs_singletons_n.fa

   dmd_index=/home/databases/nr_nt/nr.dmnd

   diamond blastx --db $dmd_index --top 5 --index-chunks 1 --block-size 16  --threads 16 --out ${f1}.dmd_nr --outfmt 6 --query ${f1} --unal 0 --evalue 1e-3

   # contigs with no good hit by blastn vs. nt or diamond vs. nr
   ./fasta_from_blast -r -f ${f1} ${f1}.dmd_nr > ${id}_contigs_singletons_nn.fa

   echo "done with diamond for $id" 
   date

   # *******************************************
   # Taxonomic assessment of aa-based alignments
   # *******************************************
   echo "tallying diamond vs. nr hits" 
   ./tally_blast_hits -w $weights_file ${f1}.dmd_nr > ${f1}.dmd_nr.tally
   ./tally_blast_hits -w $weights_file -t -ti -o tab_tree_tally ${f1}.dmd_nr > ${f1}.dmd_nr.tab_tree_tally

   echo "done tallying" 
   date

   echo "pulling out virus-derived reads (diamond)" 

   # ***************************************************************************
   # pull out virus-derived reads - this will create a file for each viral taxon
   # ***************************************************************************
   ./distribute_fasta_by_blast_taxid -v ${f1} ${f1}.dmd_nr

   echo "done with contig-based taxonomic assessment for $id"
   date


} | tee -a $log
