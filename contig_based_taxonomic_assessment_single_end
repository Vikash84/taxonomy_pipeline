#!/bin/bash

#
# This script uses the SPADES assembler to create contigs from a fastq file and then
# uses blastn and then rapsearch to try to taxonomically assign the contigs.
#
# It also maps individual reads back to to contigs to identify non-aligning reads and to 
# assess how many reads were collapsed into contigs
#
# After assembly, it uses blastn to align the contigs to the nt database and pulls out reads that
# produce good nt-level alignments
#
# It then uses rapsearch to align the remaining contigs to the nr database. 
#
# After each of these alignment steps, taxonomic reports (.tally, .tree_tally, etc.) are 
# created and contigs aligning to viral taxa are output to files
#
# The script takes one argument as input a file "base name"
#
# It expects that a file named <base_name>_R1_fuh.fastq to exist
#
# There are also a number of other scripts and programs (spades.py, bowtie2, ...) that this script expects
# to be in the user's PATH:
#
#  Programs:
#
#  spades.py
#  bowtie2
#  bowtie2-build
#  blastn
#  rapsearch
#
#  Scripts I've written:
#
#  fasta_to_fasta
#  filter_fasta_by_size
#  tally_sam_subjects
#  fasta_from_sam
#  fasta_from_blast
#  tally_hits_universal.pl 
#  distribute_fasta_by_blast_taxid.pl 
#
# Mark Stenglein
#
# 11/6/2015
#

file_base=$1

log=${file_base}.pipeline.log

f1=${file_base}_R1_fuh.fastq

# these brackets are for tee'ing stdout to the logfile
{

   echo "begin contig-based taxonomic assessment for $file_base"
   date

   # **********************************
   # first, create contigs using spades
   # **********************************

   echo "run spades for $file_base"
   date

   echo "spades.py -o ${file_base}.spades -s $f1 -t 24 -m 150"
   spades.py -o ${file_base}.spades -s $f1 -t 24 -m 150

   echo "done running spades for $file_base"
   date

   # cp contigs file (fasta_to_fasta converts to 1-line fasta format)
   fasta_to_fasta ${file_base}.spades/contigs.fasta > ./${file_base}_spade_contigs.fa


	# ***********************************************
	# assess which reads align to contigs
	# so that we can:
	# (1) do a weighted taxonomic assessment, and 
	# (2) taxomically assess non-aligning reads later
	# ***********************************************
	spades_output=${file_base}_spade_contigs.fa
	big_contigs_file=${file_base}_spade_contigs_gt_150.fa
	filter_fasta_by_size -b 150 $spades_output | fasta_to_fasta >  $big_contigs_file

	bt_index=${file_base}_spade_contigs_gt_150
	bowtie2-build $big_contigs_file $bt_index
	# bowtie2-build $spades_output $bt_index

	# C,120,1 makes min score 120 -> ~corresponds to 100% identity over ~60 bases
	bowtie2 -x $bt_index --local --score-min C,120,1 -q -U $f1 --un ${file_base}_R1_fuhs.fastq -p 12 -S ${f1}.${bt_index}.sam 2> ${f1}.${bt_index}.bt_log

	# count the # of reads that hit each contig 
	tally_sam_subjects ${f1}.${bt_index}.sam > ${f1}.${bt_index}.sam.subject_hits

   weights_file=${f1}.${bt_index}.sam.subject_hits

   # *********************
   # blastn contigs vs. nt
   # *********************

   f1=${file_base}_spade_contigs.fa

   echo "blastn contigs for $file_base ($f1) vs nt"
   date

   db="/home/databases/nr_nt/nt"
   echo "blastn -query $f1 -db $db -num_threads 24 -evalue 1e-8 -task megablast -outfmt 6 | consolidate_blast_output > ${f1}.bn_nt"
   blastn -query $f1 -db $db -num_threads 24 -evalue 1e-8 -task megablast -outfmt 6 | consolidate_blast_output > ${f1}.bn_nt

   echo "done with blastn for $file_base"
   date

   # get the blastn vs nt "misses"
   f1_out=${f1}.bn_nt
   fasta_from_blast -r $f1_out > ${file_base}_spade_contigs_n.fa

   # *******************************************
   # Taxonomic assessment of nt-based alignments
   # *******************************************

   echo "tallying blastn vs. nt hits" 
   date 
   tally_hits_universal.pl -w $weights_file ${f1}.bn_nt > ${f1}.bn_nt.tally
   tally_hits_universal.pl -w $weights_file -d -o desc_tally ${f1}.bn_nt > ${f1}.bn_nt.desc_tally
   tally_hits_universal.pl -w $weights_file -t -ti -o tab_tree_tally ${f1}.bn_nt > ${f1}.bn_nt.tab_tree_tally

   # ***************************************************************************
   # pull out virus-derived reads - this will create a file for each viral taxon
   # ***************************************************************************
   distribute_fasta_by_blast_taxid.pl -v ${f1} ${f1}.bn_nt

   # ************************************************
   # run diamond to identify protein-level alignments
   # ************************************************

   echo "diamond remaining contigs for $file_base vs. nr" 
   date

   f1=${file_base}_spade_contigs_n.fa

   dmd_index=/home/databases/nr_nt/nr.dmnd

   echo "diamond blastx --db /home/databases/nr_nt/nr.dmnd --threads 16 --out ${f1}.dmd_nr --outfmt 6 --query ${f1} --unal 0 --evalue 1e-3"
   diamond blastx --db /home/databases/nr_nt/nr.dmnd --threads 16 --out ${f1}.dmd_nr --outfmt 6 --query ${f1} --unal 0 --evalue 1e-3

   # contigs with no good hit by blastn vs. nt or diamond vs. nr
   fasta_from_blast -r -f ${f1} ${f1}.dmd_nr > ${file_base}_spade_contigs_nn.fa

   echo "done with diamond for $file_base" 
   date

   # *******************************************
   # Taxonomic assessment of aa-based alignments
   # *******************************************
   echo "tallying rapsearch vs. nr hits" 
   tally_hits_universal.pl -w $weights_file ${f1}.dmd_nr > ${f1}.dmd_nr.tally
   tally_hits_universal.pl -w $weights_file -d -o desc_tally ${f1}.dmd_nr > ${f1}.dmd_nr.desc_tally
   tally_hits_universal.pl -w $weights_file -t -ti -o tab_tree_tally ${f1}.dmd_nr > ${f1}.dmd_nr.tab_tree_tally

   echo "done tallying" 
   date

   echo "pulling out virus-derived reads (diamond)" 

   # ***************************************************************************
   # pull out virus-derived reads - this will create a file for each viral taxon
   # ***************************************************************************
   distribute_fasta_by_blast_taxid.pl -v ${f1} ${f1}.dmd_nr

   echo "done with contig-based taxonomic assessment for $file_base"
   date


} | tee -a $log
